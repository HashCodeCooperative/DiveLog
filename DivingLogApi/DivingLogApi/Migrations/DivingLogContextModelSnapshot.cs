// <auto-generated />
using System;
using DivingLogApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DivingLogApi.Migrations
{
    [DbContext(typeof(DivingLogContext))]
    partial class DivingLogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DivingLogApi.Models.Dive", b =>
                {
                    b.Property<int>("DiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AirTemp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DiveSiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiveType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Water")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WaterStream")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WaterTemp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weather")
                        .HasColumnType("INTEGER");

                    b.HasKey("DiveId");

                    b.HasIndex("DiveSiteId");

                    b.ToTable("Dives");
                });

            modelBuilder.Entity("DivingLogApi.Models.DiveSite", b =>
                {
                    b.Property<int>("DiveSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("GPSPosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("DiveSiteId");

                    b.ToTable("DiveSites");
                });

            modelBuilder.Entity("DivingLogApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isRegistered")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DivingLogApi.Models.UserDive", b =>
                {
                    b.Property<int>("UserDiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("AvgDepth")
                        .HasColumnType("REAL");

                    b.Property<int>("Ballast")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CylEndPressure")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CylStartPressure")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CylinderCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CylinderType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DivingSuit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gas")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MaxDepth")
                        .HasColumnType("REAL");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<float>("SurfaceAirConsumption")
                        .HasColumnType("REAL");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserDiveId");

                    b.HasIndex("DiveId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDives");
                });

            modelBuilder.Entity("DivingLogApi.Models.Dive", b =>
                {
                    b.HasOne("DivingLogApi.Models.DiveSite", "DiveSite")
                        .WithMany("Dives")
                        .HasForeignKey("DiveSiteId");

                    b.Navigation("DiveSite");
                });

            modelBuilder.Entity("DivingLogApi.Models.UserDive", b =>
                {
                    b.HasOne("DivingLogApi.Models.Dive", "Dive")
                        .WithMany("Divers")
                        .HasForeignKey("DiveId");

                    b.HasOne("DivingLogApi.Models.User", "User")
                        .WithMany("UserDives")
                        .HasForeignKey("UserId");

                    b.Navigation("Dive");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DivingLogApi.Models.Dive", b =>
                {
                    b.Navigation("Divers");
                });

            modelBuilder.Entity("DivingLogApi.Models.DiveSite", b =>
                {
                    b.Navigation("Dives");
                });

            modelBuilder.Entity("DivingLogApi.Models.User", b =>
                {
                    b.Navigation("UserDives");
                });
#pragma warning restore 612, 618
        }
    }
}
